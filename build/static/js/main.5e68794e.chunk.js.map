{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","PostBox.js","Post.js","Feed.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e68794e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ active, text, Icon }) {\n  return (\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n      <Icon />\n      <h2>{text}</h2>\n    </div>\n  );\n}\n\nexport default SidebarOption;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport EmojiNatureIcon from '@material-ui/icons/EmojiNature';\nimport SidebarOption from \"./SidebarOption\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { Button } from \"@material-ui/core\";\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar\">\n\n      <EmojiNatureIcon className=\"sidebar__LyfeIcon\" />\n\n      <SidebarOption active Icon={HomeIcon} text=\"Home\" />\n      <SidebarOption Icon={SearchIcon} text=\"Explore\" />\n      <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\n      <SidebarOption Icon={MailOutlineIcon} text=\"Lyfe Chat\" />\n      <SidebarOption Icon={ListAltIcon} text=\"Servers\" />\n      <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\n      <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\n\n      <Button variant=\"outlined\" className=\"sidebar__Post\" fullWidth>\n        Tweet\n      </Button>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDvRQLn1o2F_qUerTN27nFch8qYjKN4aNA\",\n  authDomain: \"lyfe-social-a40f4.firebaseapp.com\",\n  projectId: \"lyfe-social-a40f4\",\n  storageBucket: \"lyfe-social-a40f4.appspot.com\",\n  messagingSenderId: \"798513833673\",\n  appId: \"1:798513833673:web:e5b1bb587d1fa170c68f18\",\n  measurementId: \"G-7XNDN9TNZT\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState } from \"react\";\nimport \"./PostBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport db from \"./firebase\";\n\nfunction TweetBox() {\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n\n  const sendTweet = (e) => {\n    e.preventDefault();\n\n    db.collection(\"posts\").add({\n      displayName: \"User\",\n      username: \"Userrr\",\n      verified: true,\n      text: tweetMessage,\n      image: tweetImage,\n      avatar:\n        \"https://genslerzudansdentistry.com/wp-content/uploads/2015/11/anonymous-user.png\",\n    });\n\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  };\n\n  return (\n    <div className=\"tweetBox\">\n      <form>\n        <div className=\"tweetBox__input\">\n          <Avatar src=\"https://genslerzudansdentistry.com/wp-content/uploads/2015/11/anonymous-user.png\" />\n          <input\n            onChange={(e) => setTweetMessage(e.target.value)}\n            value={tweetMessage}\n            placeholder=\"What's happening?\"\n            type=\"text\"\n          />\n        </div>\n        <input\n          value={tweetImage}\n          onChange={(e) => setTweetImage(e.target.value)}\n          className=\"tweetBox__imageInput\"\n          placeholder=\"Optional: Enter image URL\"\n          type=\"text\"\n        />\n\n        <Button\n          onClick={sendTweet}\n          type=\"submit\"\n          className=\"tweetBox__tweetButton\"\n        >\n          Tweet\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default TweetBox;","import React, { forwardRef } from \"react\";\nimport \"./Post.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\n\nconst Post = forwardRef(\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__avatar\">\n          <Avatar src={avatar} />\n        </div>\n        <div className=\"post__body\">\n          <div className=\"post__header\">\n            <div className=\"post__headerText\">\n              <h3>\n                {displayName}{\" \"}\n                <span className=\"post__headerSpecial\">\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />} @\n                  {username}\n                </span>\n              </h3>\n            </div>\n            <div className=\"post__headerDescription\">\n              <p>{text}</p>\n            </div>\n          </div>\n\n\n          <img src={image} alt=\"\" />\n\n          <div className=\"post__footer\">\n            <ChatBubbleOutlineIcon fontSize=\"small\" />\n            <RepeatIcon fontSize=\"small\" />\n            <PublishIcon fontSize=\"small\" />\n            <FavoriteBorderIcon fontSize=\"small\" />\n\n\n          </div>\n            \n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport PostBox from \"./PostBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport db from \"./firebase\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Feed() {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"posts\").onSnapshot((snapshot) =>\n      setPosts(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <h2>Home</h2>\n      </div>\n\n      <PostBox />\n\n      <FlipMove>\n        {posts.map((post) => (\n          <Post\n            key={post.text}\n            displayName={post.displayName}\n            username={post.username}\n            verified={post.verified}\n            text={post.text}\n            avatar={post.avatar}\n            image={post.image}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n\n    <div className=\"app\">\n      <Sidebar />\n      <Feed />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}